import { Project } from "@/types";

export const projects: Project[] = [
  {
    _id: "1",
    title: "Profile Portfolio - Next.js 15 + TailwindCSS v4",
    shortDesc: "Modern portfolio built with Next.js and TailwindCSS",
    longDesc:
      "A responsive and feature-rich developer portfolio showcasing projects, resume, and contact information. Built with Next.js 15, React 19, and TypeScript. Styled using TailwindCSS v4 with class variance utilities, and supporting both dark mode and light mode using next-themes. Enhanced UI with lucide-react icons and Embla carousel for interactive project showcases. Backend powered by MongoDB and Mongoose for dynamic data storage, with validation via Joi and email integration using Resend API.",
    tags: [
      "Next.js",
      "React",
      "TypeScript",
      "TailwindCSS",
      "Dark Mode",
      "Light Mode",
      "Mongoose",
      "MongoDB",
      "Joi",
      "Next-Themes",
      "Lucide-React",
      "Resend",
      "Embla Carousel",
    ],
    images: [
      "/projects/profile-portfolio/1.png",
      "/projects/profile-portfolio/2.png",
      "/projects/profile-portfolio/3.png",
      "/projects/profile-portfolio/4.png",
      "/projects/profile-portfolio/5.png",
    ],
    live: "https://boolean405.vercel.app",
    source: "https://github.com/boolean405/profile-portfolio",
  },
  {
    _id: "2",
    title: "Chat Mal - Cross-Platform Chat App",
    shortDesc: "Cross-platform chat and calling app with real-time messaging",
    longDesc:
      "Chat Mal is a full-featured cross-platform messaging application supporting real-time text, voice, and video communication. The mobile client is built with Expo React Native, targeting both iOS and Android with modern modules for camera, audio, video, and notifications. Real-time messaging and call signaling are powered by Socket.IO, while WebRTC enables high-quality voice and video calls with features like call logs, push notifications, and native call UI integration via react-native-callkeep. The backend, developed with Node.js, Express, and MongoDB (Mongoose), manages authentication, messaging, media storage, and notifications. Redis is used for caching and session management, Joi for validation, and services like Cloudinary and Nodemailer handle media and email delivery. The system also integrates Expo Push Notifications for reliable cross-device alerts. Designed with scalability, modular architecture, and production-ready security best practices.",
    tags: [
      "Expo",
      "React Native",
      "iOS",
      "Android",
      "Socket.IO",
      "WebRTC",
      "Node.js",
      "Express",
      "MongoDB",
      "Mongoose",
      "Restful API",
      "Redis",
      "Joi",
      "Next.js",
      "Cloudinary",
      "Nodemailer",
      "Expo Notifications",
      "React Native CallKeep",
      "Cross-Platform",
      "Real-Time Messaging",
      "Socket.IO",
      "WebRTC",
      "Push Notifications",
      "Zustand",
      "TypeScript",
      "Dark Mode",
      "Light Mode",
      "OAuth",
    ],
    images: [
      "/projects/chat-mal/1.png",
      "/projects/chat-mal/2.png",
      "/projects/chat-mal/3.png",
      "/projects/chat-mal/4.png",
    ],
    live: "https://apkpure.com/p/com.chat.mal",
    source: "https://github.com/boolean405/chat-mal",
  },
  {
    _id: "3",
    title: "Node.js Express E-commerce API",
    shortDesc:
      "Fast, secure, and maintainable REST API for an e-commerce backend built with Node.js, Express, MongoDB/Mongoose, Joi validation, JWT auth with refresh rotation, Redis caching/queues (ioredis), Socket.IO for realtime events, and express-fileupload for media uploads.",
    longDesc:
      "A modular Node.js REST API built with Express 4, MongoDB/Mongoose 8, and JWT authentication. Features role/permit access control, product/catalog endpoints (categories, subcategories, tags, deliveries, products, orders), file uploads via express-fileupload, and Redis-backed sessions/cache. Validation is Joi-first across routes, with centralized error handling and environment-driven config (dotenv). Includes a Socket.IO namespace (api/chat) for real-time messaging with token gating via jwt.verify and Redis lookups, plus a migration bootstrap (defaultDataMigrate) to seed initial roles/permits/users. Clean architecture with separate routers, utils (validator, helper, redis), and a watch-mode dev workflow.",
    tags: [
      "Node.js",
      "Express",
      "MongoDB",
      "Mongoose",
      "JWT",
      "Joi",
      "Redis",
      "Socket.IO",
      "File Upload",
      "REST API",
    ],
    images: ["/projects/nodejs-api/1.png", "/projects/nodejs-api/2.png"],
    source: "https://github.com/boolean405/nodejs-api-project",
  },
  {
    _id: "4",
    title: "CCXT Futures Bot (EMA + Engulfing)",
    shortDesc:
      "Automated Binance Futures bot using CCXT with EMA trend + engulfing entries, TP/SL automation, and leverage control.",
    longDesc:
      "A production-focused Python trading bot for Binance USDT-M futures built with CCXT. The bot fetches OHLCV on a configurable timeframe (e.g., 5m), computes EMA(12/26) for trend detection, and confirms entries with bullish/bearish engulfing/3-line-strike logic. It adjusts leverage via Binance Futures API, sizes orders from a USDT budget, and automatically places bracket risk management using take-profit-market and stop-market orders with a TP:SL ratio. The engine inspects existing positions and open orders to avoid duplicating TP/SL, converts timestamps to Asia/Yangon, and runs on a scheduler loop with robust logging and centralized helpers. Designed for clear separation of concerns and safe defaults, including token-gated namespaces for future Socket/alerts if extended.",
    tags: [
      "Python",
      "CCXT",
      "Binance Futures",
      "EMA Strategy",
      "Engulfing Pattern",
      "TP/SL Automation",
      "Leverage Control",
      "Pandas",
      "Scheduler",
      "UTCâ†’Asia/Yangon",
    ],
    images: ["/projects/ccxt-bot/1.png", "/projects/ccxt-bot/2.png"],
    source:
      "https://github.com/boolean405/moving-average-engulfing-trading-bot",
  },
  {
    _id: "5",
    title: "BMI Calculator - Flutter + Dart",
    shortDesc: "A Flutter app to calculate Body Mass Index (BMI).",
    longDesc:
      "A simple yet modern BMI Calculator built with Flutter and Dart. The app allows users to input their weight and height using interactive sliders powered by Syncfusion, and calculates their BMI instantly. It features a clean splash screen, a user-friendly home screen, and custom theming with Oswald and Roboto fonts. Assets are structured for scalability, including logos, icons, and images. The app is styled with a custom AppColors system, providing consistency across light and dark modes.",
    tags: [
      "Flutter",
      "Dart",
      "Material Design",
      "Syncfusion Sliders",
      "Custom Fonts",
      "Splash Screen",
      "BMI Calculation",
      "Theming",
    ],
    images: [
      "/projects/flutter-bmi-calculator/1.png",
      "/projects/flutter-bmi-calculator/2.png",
    ],
    live: "https://apkpure.com/p/com.boboaung.bmicalculator",
    source: "https://github.com/boolean405/flutter-bmi-calculator",
  },
  {
    _id: "6",
    title: "Next.js E-commerce (Client + Admin)",
    shortDesc:
      "Full-stack store with Next.js 15, Prisma, Stripe, Clerk auth, and an admin dashboard.",
    longDesc:
      "A production-ready e-commerce platform split into a customer app (client) and an admin CMS. The stack uses Next.js 15 (App Router), React 19, TailwindCSS with Radix UI primitives, Zustand for state, and React Hot Toast for UX. The admin app integrates Clerk for authentication, Prisma ORM for Postgres, and Cloudinary for media. Features include product/catalog management with variants and images, categories/tags, inventory and status toggles, order management with Stripe payments/webhooks, charts & KPIs via Recharts, command palette (cmdk), and dark mode via next-themes. Clean modular architecture with Zod/React Hook Form validation, server actions/route handlers, and Prisma migrations for reliable deploys.",
    tags: [
      "Next.js",
      "React 19",
      "TypeScript",
      "TailwindCSS",
      "Radix UI",
      "Zustand",
      "Prisma",
      "Postgres",
      "Stripe",
      "Clerk",
      "Cloudinary",
      "Recharts",
      "Zod",
      "App Router",
      "Admin Dashboard",
    ],
    images: [
      "/projects/nextjs-ecommerce/1.png",
      "/projects/nextjs-ecommerce/2.png",
    ],
    source: "https://github.com/boolean405/nextjs-ecommerce-project",
  },
  {
    _id: "8",
    title: "Record Film Production (HTML, CSS, Bootstrap)",
    shortDesc:
      "A responsive movie website built with Bootstrap 5 featuring trailers, genres, and search.",
    longDesc:
      "A dynamic front-end movie website designed with semantic HTML5, custom CSS3, and Bootstrap 5. It includes a hero carousel for featured movies, genre-based sections, a responsive grid for movie cards, and a search bar for quick navigation. The layout is fully mobile-first with Bootstrap utilities, modals for trailers, and hover effects for interactivity. Ideal for showcasing upcoming releases or creating a streaming-style landing page.",
    tags: [
      "HTML5",
      "CSS3",
      "Bootstrap 5",
      "Responsive Design",
      "Movie Website",
      "Web Development",
    ],
    images: [
      "/projects/record-film-production/1.png",
      "/projects/record-film-production/2.png",
      "/projects/record-film-production/3.png",
      "/projects/record-film-production/4.png",
    ],
    live: "https://recordfilmproduction.netlify.app",
    source: "https://github.com/boolean405/record-film-production",
  },
  {
    _id: "7",
    title: "Vue.js Shoppy E-commerce",
    shortDesc:
      "A responsive e-commerce web app built with Vue 3, Vuex, Vue Router, and Bootstrap 5.",
    longDesc:
      "Shoppy is a modern single-page e-commerce application built using Vue 3, Vuex for state management, and Vue Router for navigation. It leverages Bootstrap 5 for responsive styling and FontAwesome for icons. The project includes product listing, category filters, a shopping cart with Vuex state persistence, and a clean modular architecture. Axios is integrated for API requests, allowing seamless backend communication. The app follows best practices with Vue CLI setup, ESLint linting, and a scalable folder structure suitable for production deployments.",
    tags: [
      "Vue.js",
      "Vuex",
      "Vue Router",
      "Bootstrap 5",
      "Axios",
      "FontAwesome",
      "E-commerce",
      "SPA",
      "Frontend",
    ],
    images: [
      "/projects/vue-shoppy/1.png",
      "/projects/vue-shoppy/2.png",
      "/projects/vue-shoppy/3.png",
      "/projects/vue-shoppy/4.png",
    ],
    live: "https://shoppyproject.netlify.app/",
    source: "https://github.com/boolean405/vuejs-shoppy-project",
  },
];
